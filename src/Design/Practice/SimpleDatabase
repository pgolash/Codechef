package Design.Practice;


import java.util.HashMap;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

/**
public class SimpleDatabase {
    private LinkedList<TransactionUnit> TransactionUnits;

    public SimpleDatabase(){
        TransactionUnits = new LinkedList<TransactionUnit>();
        TransactionUnits.add(new TransactionUnit());
    }

    public void set(String name, Integer value){
        TransactionUnits.getLast().set(name, value);
    }

    public Integer get(String name){
        return TransactionUnits.getLast().get(name);
    }

    public Integer numEqualTo(Integer value){
        return TransactionUnits.getLast().numEqualTo(value);
    }

    @SuppressWarnings("unchecked")
    public boolean commit() {
        if (TransactionUnits.size() <= 1) return false;

        HashMap<String, Integer> nameValue = new HashMap<String, Integer>();
        HashMap<Integer, Integer> valueCounter = new HashMap<Integer, Integer>();

        ListIterator<TransactionUnit> iterator = TransactionUnits.listIterator();
        while (iterator.hasNext()) {
            TransactionUnit block = iterator.next();
            nameValue.putAll((Map<? extends String, ? extends Integer>) block.getNameValue());
        }

        for (Entry<String, Integer> entry : nameValue.entrySet()) {
            Integer value = entry.getValue();
            if(valueCounter.get(value) == null){
                valueCounter.put(value, new Integer(1));
            }
            else{
                valueCounter.put(value, new Integer(valueCounter.get(value) + 1));
            }
            nameValue.put(entry.getKey(),entry.getValue());
        }

        TransactionUnits = new LinkedList<TransactionUnit>();
        TransactionUnits.add(new TransactionUnit(nameValue, valueCounter));

        return true;
    }

    public boolean rollBack(){
        if (TransactionUnits.size() <= 1) return false;
        TransactionUnits.removeLast();
        return true;
    }

    public void begin(){
        TransactionUnit block = new TransactionUnit();
        block.setPrev(TransactionUnits.getLast());
        TransactionUnits.add(block);
    }

    public static void main(String[] args) {
        SimpleDatabase db = new SimpleDatabase();
        Scanner scanner = new Scanner(System.in);
        scanner.useDelimiter("\\s+");
        String cmdLine;
        while (scanner.hasNextLine()) {
            cmdLine = scanner.nextLine();
            String[] tokens = cmdLine.split("\\s+");
            String cmd = tokens[0];
            String name;
            Integer value;
            try {
                switch (cmd) {
                    case "GET":
                        name = tokens[1];
                        System.out.println(db.get(name) != null ? db.get(name):"NULL");
                        break;
                    case "SET":
                        name = tokens[1];
                        value = Integer.parseInt(tokens[2]);
                        db.set(name, value);
                        break;
                    case "UNSET":
                        name = tokens[1];
                        db.set(name, null);
                        break;
                    case "NUMEQUALTO":
                        value = Integer.parseInt(tokens[1]);
                        System.out.println(db.numEqualTo(value));
                        break;
                    case "BEGIN":
                        db.begin();
                        break;
                    case "ROLLBACK":
                        if (!db.rollBack()) System.out.println("NO TRANSACTION");
                        break;
                    case "COMMIT":
                        if (!db.commit()) System.out.println("NO TRANSACTION");
                        break;
                    case "END":
                        return;
                    case "":
                        break;
                    default:
                        System.out.println("Invalid command: " + cmd );
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid number format: " + cmdLine );
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println("Possibly missing operand: " + cmdLine );
            }
        }
        scanner.close();
    }
}

class TransactionUnit {
    private TransactionUnit prev;

    private HashMap<String, Integer> nameValue = new HashMap<String, Integer>();
    private HashMap<Integer, Integer> valueCounter = new HashMap<Integer, Integer>();

    public TransactionUnit(){}

    public void setPrev(TransactionUnit block) {
        prev = block;
    }

    public TransactionUnit(HashMap<String, Integer>nameValue, HashMap<Integer, Integer>valueCounter){
        this.nameValue = nameValue;
        this.valueCounter = valueCounter;
    }

    public HashMap<String, Integer> getNameValue(){
        return nameValue;
    }

    public void set(String name, Integer currentValue){

        Integer prevValue = get(name);
        if (prevValue != null){
            Integer prevValueCounter = numEqualTo(prevValue);
            valueCounter.put(prevValue, --prevValueCounter);
        }

        Integer currentValueCounter = numEqualTo(currentValue);
        if (currentValue != null) {
            if (currentValueCounter != null) {
                valueCounter.put(currentValue, ++currentValueCounter);
            } else {
                valueCounter.put(currentValue, new Integer(1));
            }
        }

        nameValue.put(name, currentValue);
    }

    public Integer get(String name) {
        TransactionUnit blk = this;
        Integer value = blk.nameValue.get(name);
        while(!blk.nameValue.containsKey(name) && blk.prev != null){
            blk = blk.prev;
            value = blk.nameValue.get(name);
        }
        return value;
    }

    public Integer numEqualTo(Integer val){
        if (val == null) return 0;
        TransactionUnit blk = this;
        Integer counter = blk.valueCounter.get(val);
        while(counter == null && blk.prev != null){
            blk = blk.prev;
            counter = blk.valueCounter.get(val);
        }

        if (counter == null)
            return 0;
        else{
            return counter;
        }
    }
}