
Scalable has to be broken down into its constituents:

Read scaling = handle higher volumes of read operations
Write scaling = handle higher volumes of write operations
ACID-compliant databases (like traditional RDBMS's) can scale reads.
They are not inherently less efficient than NoSQL databases because the (possible) performance bottlenecks
are introduced by things NoSQL (sometimes) lacks (like joins and where restrictions) which you can opt not to use.
Clustered SQL RDBMS's can scale reads by introducing additional nodes in the cluster.
There are constraints to how far read operations can be scaled, but these are imposed by the difficulty of scaling up writes
as you introduce more nodes into the cluster.

Write scaling is where things get hairy.
There are various constraints imposed by the ACID principle which you do not see in eventually-consistent (BASE) architectures:

Atomicity means that transactions must complete or fail as a whole, so a lot of bookkeeping must be done behind the scenes to guarantee this.
Consistency constraints mean that all nodes in the cluster must be identical. If you write to one node, this write must be copied to all other
nodes before returning a response to the client. This makes a traditional RDBMS cluster hard to scale.
Durability constraints mean that in order to never lose a write you must ensure that before a response is returned to the client,
the write has been flushed to disk.
To scale up write operations or the number of nodes in a cluster beyond a certain point you have to be able to relax some of the ACID requirements:

Dropping Atomicity lets you shorten the time tables (sets of data) are locked. Example: MongoDB, CouchDB.
Dropping Consistency lets you scale up writes across cluster nodes. Examples: riak, cassandra.
Dropping Durability lets you respond to write commands without flushing to disk. Examples: memcache, redis.
NoSQL databases typically follow the BASE model instead of the ACID model.
They give up the A, C and/or D requirements, and in return they improve scalability.
Some, like Cassandra, let you opt into ACID's guarantees when you need them. However, not all NoSQL databases are more scalable all the time.

The SQL API lacks a mechanism to describe queries where ACID's requirements are relaxed. This is why the BASE databases are all NoSQL.

Personal note: one final point I'd like to make is that most cases where NoSQL is currently being used to improve performance,
a solution would be possible on a proper RDBMS by using a correctly normalized schema with proper indexes.
As proven by this very site (powered by MS SQL Server) RDBMS's can scale to high workloads, if you use them appropriately.
People who don't understand how to optimize RDBMS's should stay away from NoSQL, because they don't understand what risks they are taking with
their data.